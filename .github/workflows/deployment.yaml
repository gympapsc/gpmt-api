on: [release, push]

name: Deployment to AKS

env:
    REGISTRY_NAME: gpmtregistry
    CLUSTER_NAME: GPMTCluster
    CLUSTER_RESOURCE_GROUP: GPMTGroup
    NAMESPACE: default
    REGISTRY_SECRET_NAME: registry-token
    VERSION: v1
    
jobs:
    build:
        name: Build and push containers to ACR
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v2
        
        - name: ACR login
          uses: azure/docker-login@v1
          with:
            login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.ACR_ID }}
            password: ${{ secrets.ACR_CREDENTIALS }}
        
        - name: gpmt-api-data container build
          run: docker build ./data -t ${{ env.REGISTRY_NAME }}.azurecr.io/gpmt-api-data:${{ env.VERSION }}
        
        - name: gpmt-api-chat container build
          run: docker build ./chat -t ${{ env.REGISTRY_NAME }}.azurecr.io/gpmt-api-chat:${{ env.VERSION }}
        
        - name: gpmt-api-auth container build
          run: docker build ./auth -t ${{ env.REGISTRY_NAME }}.azurecr.io/gpmt-api-auth:${{ env.VERSION }}
        
        - name: gpmt-api-data container push
          run: docker push ${{env.REGISTRY_NAME}}.azurecr.io/gpmt-api-data:${{ env.VERSION }}
       
        - name: gpmt-api-chat container push
          run: docker push ${{env.REGISTRY_NAME}}.azurecr.io/gpmt-api-chat:${{ env.VERSION }}

        - name: gpmt-api-auth container push
          run: docker push ${{env.REGISTRY_NAME}}.azurecr.io/gpmt-api-auth:${{ env.VERSION }}
        
    deploy:
        name: Deploy to AKS
        needs: build
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v2 
        
        - name: Set AKS cluster
          uses: azure/aks-set-context@v1
          with:
            creds: '${{ secrets.AZURE_CREDENTIALS }}'
            cluster-name: ${{ env.CLUSTER_NAME }}
            resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
        
        - name: Create Kubernetes namespace ${{ env.NAMESPACE }}
          run: kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
        
        - name: Create kubernetes registry secret
          uses: azure/k8s-create-secret@v1
          with:
            container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
            container-registry-username: ${{ secrets.ACR_ID }}
            container-registry-password: ${{ secrets.ACR_CREDENTIALS }}
            secret-name: ${{ env.REGISTRY_SECRET_NAME }}
            namespace: ${{ env.NAMESPACE }}

        - uses: azure/setup-helm@v1
          with:
            version: '3.5.3'
          id: install

        - name: Fetch helm repositories
          run: |
            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
            helm repo add jetstack https://charts.jetstack.io
            helm repo update

        - name: Deploy nginx ingress controller
          run: |
            helm upgrade nginx-ingress ingress-nginx/ingress-nginx \
            --install \
            --values ./manifest/nginx.values.yaml \
            --values ./manifest/prod/nginx.values.yaml \
            --namespace ${{ env.NAMESPACE }} 

        - name: Deploy certificate manager
          run: |
            helm install cert-manager jetstack/cert-manager \
            --values ./manifest/cert-manager.values.yaml \
            --set installCRDs=true \
            --namespace ${{ env.NAMESPACE }}

        - name: Deploy api services
          uses: azure/k8s-deploy@v1
          with:
            manifests: |
                manifest/deployments.yaml
                manifest/services.yaml
            imagepullsecrets: |
                ${{ env.REGISTRY_SECRET_NAME }}
            namespace: ${{ env.NAMESPACE }}

        - name: Deploy api ingress
          uses: azure/k8s-deploy@v1
          with:
            manifests: |
                manifest/ingress.yaml
            namespace: ${{ env.NAMESPACE }}
